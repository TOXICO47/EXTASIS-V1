proceso.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0'; //SI QUIERES TEXTO SIMPLIFICADO EN LA CONSOLA USA ESTE C√ìDIGO
importar './config.js';
importar { createRequire } desde "m√≥dulo";
importar ruta, {unirse} desde 'ruta'
importar { fileURLToPath, pathToFileURL } desde 'url'
importar {plataforma} desde 'proceso'
importar * como ws desde 'ws';
importar { readdirSync, statSync, unlinkSync, existSync, readFileSync, rmSync, ver } desde 'fs';
//importar reloj desde 'glob-fs'
importar yargs de 'yargs';
importar {spawn} desde 'child_process';
importar lodash desde 'lodash';
importar tiza de 'tiza';
importar error de sintaxis desde 'error de sintaxis';
importar {tmpdir} desde 'os';
importar {formato} desde 'util';
importar P de 'pino';
import {makeWASocket, protoType, serialize} from './lib/simple.js';
importar { Low, JSONFile } desde 'lowdb';
importar { mongoDB, mongoDBV2 } desde './lib/mongoDB.js';
importar tienda desde './lib/store.js'
const {DisconnectReason, useMultiFileAuthState} = esperar importaci√≥n('@adiwajshing/baileys')
const { CONECTANDO } = ws
const {cadena} = lodash
const PUERTO = proceso.env.PORT || proceso.env.SERVER_PORT || 3000

prototipo()
publicar por fasc√≠culos()

global.__filename = function filename(pathURL = import.meta.url, rmPrefix = plataforma! == 'win32') { return rmPrefix ? /file:\/\/\//.test(rutaURL) ? fileURLToPath(pathURL) : pathURL : pathToFileURL(pathURL).toString() }; global.__dirname = function dirname(rutaURL) { return ruta.dirname(global.__filename(rutaURL, verdadero)) }; global.__require = function require(dir = import.meta.url) { return createRequire(dir) }

global.API = (nombre, ruta = '/', consulta = {}, apikeyqueryname) => (nombre en global.APIs ? global.APIs[nombre] : nombre) + ruta + (consulta || apikeyqueryname ? '?' + new URLSearchParams(Object.entries({ ...consulta, ...(apikeyqueryname ? { [apikeyqueryname]: global.APIKeys[nombre en global.APIs ? global.APIs[nombre] : nombre] } : {}) } )) : '')

global.timestamp = { inicio: nueva fecha }

const __dirname = global.__dirname(import.meta.url)

global.opts = new Object(yargs(process.argv.slice(2)).exitProcess(false).parse())
global.prefix = new RegExp('^[' + (opts['prefix'] || 'xzXZ/i!#$%+¬£¬¢‚Ç¨¬•^¬∞=¬∂‚àÜ√ó√∑œÄ‚àö‚úì¬©¬Æ:;?& .\\-HhhHBb.aA').replace(/[|\\{}()[\]^$+*?.\-\^]/g, '\\$&') + ']')

global.db = new Low(/https?:\/\//.test(opts['db'] || '') ? new cloudDBAdapter(opts['db']) : new JSONFile(`${opts. _[0] ? opciones._[0] + '_': ''}base de datos.json`))

global.DATABASE = global.db // Compatibilidad con versiones anteriores
global.loadDatabase = funci√≥n as√≠ncrona loadDatabase() {
if (global.db.READ) devuelve una nueva promesa ((resolver) => setInterval (funci√≥n as√≠ncrona () {
si (!global.db.LEER) {
clearInterval(esto)
resolve(global.db.data == null ? global.loadDatabase() : global.db.data)
}
}, 1 * 1000))
si (global.db.data !== null) devuelve
global.db.LEER = verdadero
espera global.db.read().catch(console.error)
global.db.READ = nulo
global.db.datos = {
usuarios: {},
charlas: {},
estad√≠sticas: {},
mensajes: {},
pegatina: {},
ajustes: {},
...(global.db.datos || {})
}
global.db.cadena = cadena(global.db.datos)
}
cargarBase de datos()

global.authFile = `Hades-Sesi√≥n`
const { estado, saveState, saveCreds } = esperar useMultiFileAuthState(global.authFile)

const opciones de conexi√≥n = {
imprimirQRInTerminal: verdadero,
autenticaci√≥n: estado,
registrador: P({nivel: 'silencioso'}),
navegador: ['The-Hades-Bot-MD','Safari','1.0.0']
}

global.conn = makeWASocket(opciones de conexi√≥n)
conn.isInit = falso

si (! opciones ['prueba']) {
if (global.db) setInterval(async() => {
si (global.db.data) espera global.db.write()
if (opts['autocleartmp'] && (global.support || {}).find) (tmp = [os.tmpdir(), 'tmp'], tmp.forEach(filename => cp.spawn('find' , [nombre de archivo, '-amin', '3', '-tipo', 'f', '-eliminar'])))
}, 30 * 1000)}

if (opts['server']) (esperar importaci√≥n('./server.js')).default(global.conn, PORT)

funci√≥n borrar Tmp () {
const tmp = [tmpdir(), join(__dirname, './tmp')]
const nombre de archivo = []
tmp.forEach(dirname => readdirSync(dirname).forEach(file => filename.push(join(dirname, file))))
devuelve nombre de archivo.map(archivo => {
const stats = statSync(archivo)
if (stats.isFile() && (Date.now() - stats.mtimeMs >= 1000 * 60 * 3)) return unlinkSync(file) // 3 minutos
falso retorno
})}

conexi√≥n de funci√≥n as√≠ncrona Actualizaci√≥n (actualizaci√≥n) {
const { conexi√≥n, √∫ltima desconexi√≥n, isNewLogin } = actualizar
if (isNewLogin) conn.isInit = verdadero
const c√≥digo = lastDisconnect?.error?.output?.statusCode || lastDisconnect?.error?.output?.payload?.statusCode
if (c√≥digo && c√≥digo !== DisconnectReason.loggedOut && conn?.ws.readyState !== CONECTANDO) {
consola.log(espera global.reloadHandler(verdadero).catch(consola.error))
global.timestamp.connect = nueva fecha
}
if (global.db.data == nulo) loadDatabase()
si (conexi√≥n == 'abrir') {
console.log(tiza.amarillo(`‚ñ£‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑¬∑\n‚îÇ\n‚îÇ‚ùß ùô≤ùôæùôΩùô¥ùô≤ùöÉùô∞ùô≥ùôæ ùô≤ùôæùöÅùöÅùô¥ùô≤ùöÉùô∞ùôºùô¥ùôΩùöÉùô¥ ùô∞ùôª ùöÜùô∑ùô∞ùöÉùöÇùô∞ùôøùôø ‚úÖ \ n‚îÇ \ n‚ñ£ versi√≥n
}

proceso.on('excepci√≥n no detectada', consola.error)

let isInit = verdadero;
dejar controlador = esperar importaci√≥n ('./controlador.js')
global.reloadHandler = funci√≥n as√≠ncrona (restatConn) {
tratar {
const Manejador = aguardar importaci√≥n(`./handler.js?update=${Date.now()}`).catch(console.error)
if (Objeto.claves(Manejador || {}).longitud) manejador = Manejador
} atrapar (e) {
consola.error(e)
}
si (reestablecer conexi√≥n) {
const oldChats = global.conn.chats
intente { global.conn.ws.close() } catch { }
conn.ev.removeAllListeners()
global.conn = makeWASocket(opciones de conexi√≥n, { chats: oldChats })
esInicio = verdadero
}
si (! isInit) {
conn.ev.off('mensajes.upsert', conn.handler)
conn.ev.off('grupo-participantes.actualizar', conn.participantesActualizar)
conn.ev.off('groups.update', conn.groupsUpdate)
conn.ev.off('mensaje.eliminar', conn.onDelete)
conn.ev.off('llamada', conn.onLlamar)
conn.ev.off('conexi√≥n.actualizar', conn.conexi√≥nActualizar)
conn.ev.off('creds.update', conn.credsUpdate)
}
  
conn.wElcome = '‚ï≠‚îÄig ùôºùô∏ ùô≤ùöÅùô¥ùô∞ùô≥ùôæùöÅ \ n‚îÇüìî·©≠‚úéhttp: //wa.me/5212411347465 \ n‚îÇüìö·©≠‚úéùô¥ùôΩ ùô¥ùöÇùöÉùô¥ ùô∂ùöÅùöÑùôøùôæ ùôøùöÑùô¥ùô≥ùô¥ùöÇ ùô¥ùôΩùô≤ùôæùôΩùöÉùöÅùô∞ùöÅ \ n‚îÇüçÄ·©≠‚úéùô∞ùôºùô∏ùöÇùöÉùô∞ùô≥ùô¥ùöÇ \ n‚îÇü§ù·©≠‚úéùô∞ùôºùô∏ùô∂ùôæùöÇ \ n‚îÇ‚ù§Ô∏èüìö·©≠‚úéùô≥ùô¥ùöÇùôºùô∞ùô≥ùöÅùô¥ ‚îÇ‚ó¶‚ûõüòá·©≠‚úéùô≤ùôæùöÉùôæùöÅùöÅùô¥ùôæ ùöà ùôº√°ùöÇ \ n‚îÇ‚ÅâÔ∏è·©≠‚úéùô∞ùöÖùô∏ùöÇùôæ ùô∏ùôºùôøùôæùöÅùöÉùô∞ùôΩùöÉùô¥: \ nùôøùöòùöõ ùöèùöäùöüùöòùöõ ùôªùöéùöé ùöïùöäùöú ùöõùöéùöêùöïùöäùöú ùöçùöéùöï ùöêùöõùöûùöôùöò ùöôùöäùöõùöä ùööùöûùöé ùöéùöüùöíùöùùöéùöú ùöúùöéùöõ ùöéùöïùöíùöñùöíùöóùöäùöçùöò ùö¢ ùöéùöüùöíùöùùöéùöú ùöùùöéùöóùöéùöõ ùöôùöõùöòùöãùöïùöéùöñùöäùöú ùöåùöòùöó ùöåùöõùöéùöäùöçùöòùöõ ùöêùöõùöû ùöêùöõùöû \ n‚îÇ@Desc \ n‚îÇ‚ó¶ ‚ûõüå± ‚ûõüå± ‚ûõüå± ‚ûõüå± ‚ûõüå± ‚ûõüå± ‚ûõüå±. ùêéùêÖùêÇ ùêòùêéùêïùêÄùêçùêà\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑'

conn.bye = '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬∞. ‚ô°. ¬∞ ‚Äß‚îÄ‚îÄ‚îÄ‚îÄ raz√≥n n‚îÇüå±ùêéùêÖùêÇ ùêòùêéùêïùêÄùêçùêà‚òò\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑Ô∏è'
conn.spromote = '@usuario ùöÇùô¥ ùöÇùöÑùôºùô∞ ùô∞ùôª ùô∂ùöÅùöÑùôøùôæ ùô≥ùô¥'
conn.sdemote = '@usuario nùô∞ùô±ùô∞ùôΩùô≥ùôæùôΩùô∞ ùô¥ùôª ùô∂ùöÅùöÑùôøùôæ ùô≥ùô¥ ùô∞ùô≥ùôºùô∏ùôΩùöÇ'
conn.ssubject = '@subject \ n‚îÇ‚ó¶‚ûõüìö·©≠‚úéùöÇùô¥ ùô∑ùô∞ ùôºùôæùô≥ùô∏ùôµùô∏ùô≤ùô∞ùô≥ùôæ ùô¥ùôª ùôΩùôæùôºùô±ùöÅùô¥ ùô≥ùô¥ùôª ùô∂ùöÅùöÑùôøùôæ'
conn.srevoke = '@desc \ n‚îÇ‚ó¶‚ûõüìö·©≠‚úéùöÇùô¥ ùô∑ùô∞ ùôºùôæùô≥ùô∏ùôµùô∏ùô≤ùô∞ùô≥ùôæ ùôªùô∞ ùô≥ùô¥ùöÇùô≤ùöÅùô∏ùôøùô≤ùô∏ùôæùôΩ ùô≥ùô¥ùôª ùô∂ùöÅùöÑùôøùôæ'
conn.srevoke = '@revoke \ n‚îÇ‚ó¶‚ûõüìö·©≠‚úéùöÇùô¥ ùô∑ùô∞ ùô∞ùô≤ùöÉùöÑùô∞ùôªùô∏ùöâùô∞ùô≥ùôæ ùô¥ùôª ùôªùô∏ùôΩùô∫ ùô≥ùô¥ùôª ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ ùô∂ùöÅùöÑùôøùôæ

conn.handler = handler.handler.bind(global.conn)
conn.participantsUpdate = controlador.participantsUpdate.bind(global.conn)
conn.groupsUpdate = controlador.groupsUpdate.bind(global.conn)
conn.onDelete = handler.deleteUpdate.bind(global.conn)
conn.onCall = handler.callUpdate.bind(global.conn)
conn.conexi√≥nActualizar = conexi√≥nActualizar.bind(global.conn)
conn.credsUpdate = saveCreds.bind(global.conn, true)

conn.ev.on('mensajes.upsert', conn.handler)
conn.ev.on('group-participants.update', conn.participantsUpdate)
conn.ev.on('groups.update', conn.groupsUpdate)
conn.ev.on('mensaje.eliminar', conn.onEliminar)
conn.ev.on('llamada', conn.onLlamar)
conn.ev.on('conexi√≥n.actualizar', conn.conexi√≥nActualizar)
conn.ev.on('creds.update', conn.credsUpdate)
esInicio = falso
volver verdadero
}

const pluginFolder = global.__dirname(join(__dirname, './plugins/index'))
const pluginFilter = nombre de archivo => /\.js$/.test(nombre de archivo)
complementos globales = {}
funci√≥n as√≠ncrona archivosInit() {
for (let filename of readdirSync(pluginFolder).filter(pluginFilter)) {
tratar {
let file = global.__filename(join(pluginFolder, filename))
m√≥dulo const = esperar importaci√≥n (archivo)
global.plugins[nombre de archivo] = m√≥dulo.predeterminado || m√≥dulo
} atrapar (e) {
conn.registrador.error(e)
eliminar global.plugins[nombre de archivo]
}}}
archivosInit().then(_ => Object.keys(global.plugins)).catch(console.error)

global.reload = as√≠ncrono (_ev, nombre de archivo) => {
if (pluginFilter(nombre de archivo)) {
let dir = global.__filename(join(pluginFolder, filename), true)
if (nombre de archivo en global.plugins) {
if (existsSync(dir)) conn.logger.info(` plugin actualizado - '${filename}'`)
m√°s {
conn.logger.warn(`complemento eliminado - '${nombre de archivo}'`)
volver eliminar global.plugins[nombre de archivo]
}
} else conn.logger.info(`nuevo complemento - '${nombre de archivo}'`)
let err = syntaxerror(readFileSync(dir), nombre de archivo, {
sourceType: 'm√≥dulo',
allowAwaitOutsideFunction: verdadero
})
if (err) conn.logger.error(`error de sintaxis al cargar '${nombre de archivo}'\n${formato(err)}`)
m√°s prueba {
m√≥dulo const = (esperar importaci√≥n(`${global.__filename(dir)}?update=${Date.now()}`))
global.plugins[nombre de archivo] = m√≥dulo.predeterminado || m√≥dulo
} atrapar (e) {
conn.logger.error(`error requiere complemento '${nombre de archivo}\n${formato(e)}'`)
} finalmente {
global.plugins = Object.fromEntries(Object.entries(global.plugins).sort(([a], [b]) => a.localeCompare(b)))
}}}
Objeto.congelar(global.recargar)
ver (pluginFolder, global.reload)
esperar global.reloadHandler()
funci√≥n as√≠ncrona _quickTest() {
dejar probar = esperar Promesa.todo([
engendrar('ffmpeg'),
engendrar('ffprobe'),
spawn('ffmpeg', ['-hide_banner', '-loglevel', 'error', '-filter_complex', 'color', '-frames:v', '1', '-f', 'webp', '-']),
engendrar('convertir'),
engendrar('magia'),
engendrar('gm'),
spawn('buscar', ['--version'])
].mapa(p => {
return Promesa.carrera([
nueva Promesa(resolver => {
p.on('cerrar', c√≥digo => {
resolver (c√≥digo! == 127)
})}),
nueva Promesa(resolver => {
p.on('error', _ => resolver(falso))
})])}))
let [ffmpeg, ffprobe, ffmpegWebp, convert, magick, gm, find] = prueba
let s = global.support = { ffmpeg, ffprobe, ffmpegWebp, convert, magick, gm, find }
Objeto.freeze(global.soporte)
}
establecerIntervalo(async() => {
var a = esperar clearTmp()
console.log (chalk.cyanbright (`\ n‚ñ£‚îÄ‚îÄ‚îÄigulo \n‚îÇ\n‚ñ£‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑¬∑\n`¬∑¬∑\n') )
}, 180000)
_examen r√°pido()
.entonces(() => conn.logger.info(`∆á·¥Ä Ä…¢·¥Ä…¥·¥Ö·¥è..\n`))
.catch(consola.error)
